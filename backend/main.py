# ファイル名: main.py

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import openai
import os
from dotenv import load_dotenv

# 環境変数のロード
load_dotenv("../.env")
API_KEY = os.getenv("API_KEY")

# OpenAI クライアントの作成
client = openai.Client(api_key=API_KEY)

# FastAPI のインスタンス
app = FastAPI()

# CORS ミドルウェアの追加
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ✅ `field` を追加
class CompletionRequest(BaseModel):
    text: str  # ユーザーが入力したテキスト
    field: str  # どの入力欄に対応する補完か


@app.get("/")
def hello():
    return {"message": "Hello World"}


@app.post("/complete")
async def complete(request: CompletionRequest):

    # フィールドごとのプロンプト設定
    prompts = {
        # 【Step 1: 超簡易概要】===============================
        # 「誰のため？」の入力欄
        "who": f"""
        ### 🔍 **誰のため？**
        ユーザーが「誰のため？」の情報を入力中です：
        {request.text}
    
        🎯 **目的**: この製品・サービスの対象となるユーザー層を明確にする。
    
        📝 **指示**:
        - 入力されたユーザー層を具体的に補完してください。入力文の後に「、特に〜向け」などの形で対象を絞り込んでください。
        - ターゲットが具体的に分かるように補完してください。
        - ユーザーが「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。
        - **入力文を含まず**、純粋な補完部分のみを返す。

        ✅ **補完の例**:
        - 、特に就活活動を行う大学生向け
        - 、特にスタートアップで働く開発者向け
        - 、特に健康志向の高い人やフィットネス愛好者向け

        """,
        # 「課題」の入力欄（ターゲットの抱える問題）
        "problem": f"""
        ### 🔍 **課題**
        ユーザーが「課題」を入力中です：
        {request.text}

        🎯 **目的**: ターゲット顧客が直面している主要な問題を明確に補完する。

        📝 **指示**:
        - 入力された課題の内容を、より具体的で分かりやすいものに補完してください。
        - 「〜に課題を抱えている」「〜に苦戦している」など、自然な形で顧客の課題を補完してください。
        - ユーザーが「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。
        - **入力文を含まず**、純粋な補完部分のみを返す。    

        ✅ **補完の例**:
        - で、新規顧客の獲得に苦戦している
        - で、ターゲットユーザーとのエンゲージメントを高められずにいる
        - で、社内のコミュニケーションが円滑に進まない
        """,
        # 【Step 2: 簡易リーンキャンバス】====================
        # 「タイトル」の入力欄（サービス名や簡単な説明）
        "title": f"""
        ### 🔍 **タイトル**
        ユーザーが「タイトル」を入力中です：
        {request.text}

        🎯 **目的**: サービスやプロダクトを一言で表現し、分かりやすく伝える。

        📝 **指示**:
        - タイトルが簡潔でキャッチーになるように補完してください。
        - 可能であれば、簡単なキャッチフレーズや特徴を補足してください。
        - ユーザーが「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。   
        - **入力文を含まず**、純粋な補完部分のみを返す。

        ✅ **補完の例**:
        - 、AIで学習を効率化するプラットフォーム
        - 、直感的に使えるタスク管理アプリ
        - 、データドリブンな意思決定を支援する分析ツール
        """,
        # 「提供価値」の入力欄（どんな価値を提供するか）
        "value": f"""
        ### 🔍 **提供価値**
        ユーザーが「提供価値」を入力中です：
        {request.text}

        🎯 **目的**: このサービスがどのような価値を提供するのかを明確にする。

        📝 **指示**:
        - 提供価値が簡潔で分かりやすくなるように補完してください。
        - 可能であれば、どのような方法で価値を提供するのかを補足してください。
        - ユーザーが「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。   
        - **入力文を含まず**、純粋な補完部分のみを返す。

        ✅ **補完の例**:
        - 、他にもAIを活用して業務を効率化
        - 、他にもデータ分析に基づく最適な意思決定を支援
        - 、他にも直感的なUIで初心者でも簡単に利用可能
        """,
        # 「概要」の入力欄（サービスの目的や機能）
        "summary": f"""
        ### 🔍 **概要**
        ユーザーが「概要」を入力中です：
        {request.text}

        🎯 **目的**: サービスやプロダクトの目的や基本的な機能を明確にする。

        📝 **指示**:
        - どのような目的で作られたサービスかを簡潔に補完してください。
        - 必要に応じて、主な機能や特長も補足してください。
        - ユーザーが「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。   
        - **入力文を含まず**、純粋な補完部分のみを返す。

        ✅ **補完の例**:
        - 、AIを活用し、個別最適化された学習体験を提供
        - 、クラウド上でリアルタイムにデータを管理できるツール
        - 、オンラインマーケットプレイスを通じて簡単に販売・購入が可能
        """,
        # 「Before / After」の入力欄（課題と解決後の状態）
        "beforeAfter": f"""
        ### 🔍 **Before / After**
        ユーザーが「Before / After」の情報を入力中です：
        {request.text}

        🎯 **目的**: 現状の課題（Before）と、それを解決した後の理想的な状態（After）を明確にする。

        📝 **指示**:
        - Before（現在の課題）と After（解決後の変化）を、分かりやすい形で補完してください。
        - 「Before:」「After:」のように明示せずに、自然な文章の流れで表現してください。
        - ユーザーが「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。   
        - **入力文を含まず**、純粋な補完部分のみを返す。

        ✅ **補完の例**:
        - 、チームでのアイデア共有が難しい → コラボレーションツールを導入し、円滑なアイデア交換が可能に
        - 、学習効果が低い → 個別指導AIを活用し、学習効率を向上させる
        - 、オンライン販売の売上が伸び悩んでいる → SNS広告を活用し、新規顧客の獲得がスムーズに
        """,
        # 【Step 3: 詳細リーンキャンバス】====================
        # 「顧客」の入力欄（ターゲットユーザーの詳細）
        "customer": f"""
        ### 🔍 **顧客**
        ユーザーが「顧客」の情報を入力中です：
        {request.text}

        🎯 **目的**: 具体的なターゲット層（年齢・職業・行動特性など）を明確にする。

        📝 **指示**:
        - ターゲット顧客の詳細（年齢層・職業・ライフスタイルなど）を補完してください。
        - 「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。 
        - **入力文を含まず**、純粋な補完部分のみを返す。  

        ✅ **補完の例**:
        - 、主に20代後半から30代のフリーランスエンジニア向け
        - 、特にリモートワークを活用する企業のマーケティング担当者向け
        - 、デジタルスキルを学びたい初心者向けの大学生や社会人向け
        """,
        # 「独自の提供価値」の入力欄（競合との差別化ポイント）
        "uniqueValue": f"""
        ### 🔍 **独自の提供価値**
        ユーザーが「独自の提供価値」の情報を入力中です：
        {request.text}

        🎯 **目的**: 競合との差別化ポイントを明確にする。

        📝 **指示**:
        - 競合と比較した際の強みや、このサービスならではの価値を明確に補完してください。
        - 「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。   
        - **入力文を含まず**、純粋な補完部分のみを返す。

        ✅ **補完の例**:
        - 、AIを活用したパーソナライズ機能を搭載
        - 、従来のツールよりも低コストで高精度な分析が可能
        - 、直感的なUI/UX設計により初心者でも簡単に操作できる
        """,
        # 「課題解決策」の入力欄（どのように問題を解決するか）
        "solution": f"""
        ### 🔍 **課題解決策**
        ユーザーが「課題解決策」の情報を入力中です：
        {request.text}

        🎯 **目的**: 課題を解決する具体的な方法を明確にする。

        📝 **指示**:
        - 課題をどのように解決するのか、具体的な施策を補完してください。
        - 「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。  
        - **入力文を含まず**、純粋な補完部分のみを返す。 

        ✅ **補完の例**:
        - 、AIを活用して自動化し、作業時間を50%削減
        - 、データ分析を用いた最適なレコメンドを提供
        - 、リアルタイムフィードバック機能で即座に改善点を提示
        """,
        # 「優位性」の入力欄（競合に対するアドバンテージ）
        "advantage": f"""
        ### 🔍 **優位性**
        ユーザーが「優位性」の情報を入力中です：
        {request.text}

        🎯 **目的**: 競合に対してどのような点で差別化できるのかを明確にする。

        📝 **指示**:
        - 競合との差別化ポイントを簡潔に補完してください。
        - 他社にはない独自の技術・サービス・提供価値を強調してください。
        - 「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。  
        - **入力文を含まず**、純粋な補完部分のみを返す。 

        ✅ **補完の例**:
        - 、独自のAIモデルにより解析精度が業界トップレベル
        - 、競合より50%低コストで導入可能
        - 、リアルタイムデータ分析機能で即時フィードバックを提供
        """,
        # 「コスト構造」の入力欄（事業運営にかかるコスト）
        "costStructure": f"""
        ### 🔍 **コスト構造**
        ユーザーが「コスト構造」の情報を入力中です：
        {request.text}

        🎯 **目的**: サービスの運営にかかる主要なコスト（開発費・運営費・マーケティング費など）を明確にする。

        📝 **指示**:
        - 事業運営において発生する主なコストを簡潔に補完してください。
        - 「開発費」「広告費」「人件費」など、具体的なコスト項目を示してください。
        - 「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。   
        - **入力文を含まず**、純粋な補完部分のみを返す。

        ✅ **補完の例**:
        - 、サーバー維持費やクラウドサービス利用料
        - 、エンジニアの人件費や開発ツールのライセンス費
        - 、広告運用費やSNSマーケティング費用
        """,
        # 「収益の流れ」の入力欄（どのように収益を得るか）
        "revenueStream": f"""
        ### 🔍 **収益の流れ**
        ユーザーが「収益の流れ」の情報を入力中です：
        {request.text}

        🎯 **目的**: このビジネスがどのように収益を生み出すのか、具体的な収益モデルを明確にする。

        📝 **指示**:
        - どのような手段で収益を得るのかを簡潔に補完してください。
        - 「サブスクリプション」「広告収益」「一括購入」など、具体的な収益モデルを示してください。
        - 「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。  
        - **入力文を含まず**、純粋な補完部分のみを返す。 

        ✅ **補完の例**:
        - 、月額サブスクリプションモデルで定額課金
        - 、広告掲載による収益を得る
        - 、一括購入と追加機能の課金による収益モデル
        """,
        # 「チャネル」の入力欄（顧客へのアプローチ方法）
        "channel": f"""
        ### 🔍 **チャネル**
        ユーザーが「チャネル」の情報を入力中です：
        {request.text}

        🎯 **目的**: ターゲット顧客にどのようにアプローチするのか、販路・広告手法などを明確にする。

        📝 **指示**:
        - 顧客にリーチする方法を簡潔に補完してください。
        - 「SNS」「Web広告」「オフラインイベント」など、具体的な販路・マーケティング手法を示してください。
        - 「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。  
        - **入力文を含まず**、純粋な補完部分のみを返す。 

        ✅ **補完の例**:
        - 、InstagramやX（旧Twitter）を活用したSNSマーケティング
        - 、Google広告やYouTube動画広告を活用したデジタルマーケティング
        - 、展示会やネットワーキングイベントで直接営業を行う
        """,
        # 「主要指標」の入力欄（事業成功を測るKPI）
        "keyMetrics": f"""
        ### 🔍 **主要指標**
        ユーザーが「主要指標」の情報を入力中です：
        {request.text}

        🎯 **目的**: このビジネスが成功したかどうかを測る指標（KPI）を明確にする。

        📝 **指示**:
        - どの数値やデータを指標として事業の成長を測るのか、簡潔に補完してください。
        - 「ユーザー数」「リテンション率」「売上高」など、具体的なKPIを示してください。
        - 「,」や「。」を最後に打たなくても、自然な文章として補完を行ってください。
        - ユーザーが入力した文章に関連のある続きの文だけを出力してください。
        - ユーザーが意図した意味を維持したまま補完を行う。
        - 入力された単語の一部を異なる意味に解釈しない。
        - 文脈に応じた適切な補完を行う。 
        - **入力文を含まず**、純粋な補完部分のみを返す。  

        ✅ **補完の例**:
        - 、月間アクティブユーザー数（MAU）を指標とする
        - 、継続率（リテンション率）を重視し、90日間の定着率を測定
        - 、広告クリック率（CTR）やコンバージョン率（CVR）を主要指標とする
        """,
    }

    # 指定された field に対応するプロンプトを取得
    prompt = prompts.get(request.field)
    if not prompt:
        return {"error": "不明な入力フィールド"}

    # ✅ OpenAI API にリクエストを送る
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "あなたはユーザーの入力を補完するAIです。"},
            {"role": "user", "content": prompt},
        ],
        max_tokens=50,
        temperature=0.7,
    )

    # ✅ OpenAI のレスポンスを取得
    response_content = response.choices[0].message.content.strip()
    # 🔍 補完結果から「入力」部分を除去
    response_content = response_content.replace(
        f"- **入力**: {request.text} **補完**: ", ""
    ).strip()

    print("✅ APIレスポンス:", response_content)  # ログ出力

    # ✅ 修正：必ずAPIの補完結果を返す
    return {"補完": response_content}
